var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Creat GitHub website', 'text': '', 'tags': '', 'url': 'Creat GitHub website.html'}, {'title': 'IPV6 question', 'text': 'need to connect Proxy: \n \xa0>add ".gitconfig" in Y:/home \n [http]\n\tproxy = http://[2001:288:6004:17::69]:3128\n[user]\n    name = useename\n    email = XXXXXXXX@gm.nfu.edu.tw \n', 'tags': '', 'url': 'IPV6 question.html'}, {'title': 'Homework', 'text': '', 'tags': '', 'url': 'Homework.html'}, {'title': 'W8H', 'text': 'https://gitter.im/mdecourse/Fall2020 \xa0uploaded in Nov12 by KMOL. \n Made in\xa0 https://app.diagrams.net/ \xa0 \n \n cp2020(python) \n https://www.kaggle.com/mdecourse/cp2020w8/ \xa0 \n """\nsemester=1091\n\ncourseno=0762\n\ncp\n\n1a 1091/0762\n\n1b 1091/0776\n\ncad\n\n2a 1091/0788\n\n2b 1091/0801\n"""\n# 導入 urllib.request: https://docs.python.org/3/library/urllib.request.html\n# 透過 urllib.request 模組中的 urlopen() 開啟網路 url 連結資料\nimport urllib.request  # the lib that handles the url stuff\n# 定義一個輸入學期與課號,就能夠輸出各課程修課人員數列的函式\n\ndef getRegList(semester, courseno):\n    # 因為課號可能以 0 開頭, 因此採字串型別輸入, 為了一致, 輸入變數一律採字串輸入\n    target_url = "https://nfulist.herokuapp.com/?semester=" + semester + "&courseno=" + courseno\n    regList = []\n    for line in urllib.request.urlopen(target_url):\n        # 由於 urlopen() 取下的網際資料為 binary 格式, 可以透過 decode() 解碼為 ASCII 資料\n        regList.append(line.decode(\'utf-8\').rstrip())\n    # 此一函式利用 return 將資料傳回\n    return regList\n    \n#print(getRegList("1091", "0776"))\n\n\n# 1b_from_nfu.txt is one line file\n#with open("1b_from_nfu.txt") as f:\n\'\'\'\nwith open("/kaggle/input/w8data/1b_oneline.txt") as f:\n    # read() will read the whole content of file\n    cRead = f.read()\nprint(cRead)\n\'\'\'\n\nwith open("/kaggle/input/w8data/1a_from_nfu.txt") as f:\n    # read() will read the whole content of file\n    cRead = f.read()\nprint(cRead)\n\n\'\'\'\n\nwith open("/kaggle/input/1b_oneline.txt") as f:\n    # readline() only read one line\n    cReadline = f.readline()\n#print(cReadline)\n\nwith open("1b_from_nfu.txt") as f:\n    # readlines() will read line by line and put into list\n    cReadlines = f.readlines()\n#print(cReadlines)\n\n# user split() to cut cRead string into list with " "\ncReadSplit = cRead.split(" ")\n#print(cReadSplit)\n\nfor i in range(len(cReadSplit)):\n    print(cReadSplit[i])\n\'\'\' \n', 'tags': '', 'url': 'W8H.html'}]};