var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Create GitHub web', 'text': 'prepare: \n python--fall2020_v2 \n github account \n website(firefox,chrome) \n USB(least 32GB) \n', 'tags': '', 'url': 'Create GitHub web.html'}, {'title': 'IPV6 question(NFU BGA0810)', 'text': 'need to connect Proxy: \n \xa0>add ".gitconfig" in Y:/home \n [http]\n\tproxy = http://[2001:288:6004:17::69]:3128\n[user]\n    name = useename\n    email = XXXXXXXX@gm.nfu.edu.tw \n', 'tags': '', 'url': 'IPV6 question(NFU BGA0810).html'}, {'title': 'step1-download github file(fall2020_v2)(cmd)', 'text': '1.(X): \n 2.cd (folder) \n 3.git clone  https://github.com/username/cp2020.git \n 4.git submodule add  https://github.com/username/cmsimde.git \xa0cmsimde \n step2-clon   file (folder) \n 1.open->(X):/fall2020_v2/tmp/cmsimde/up_dir \n 2.clone <up_dir> file to <cp2020> \n', 'tags': '', 'url': 'step1-download github file(fall2020_v2)(cmd).html'}, {'title': 'step2-open&set web(cmd)', 'text': '1.(X): \n 2.cd tmp/cp2020/cmsimde \n 3.python wsgi.py \n 4.clon URL<https:/IP/> and use chome to connect (punch generate_pages after finished) \xa0 \n', 'tags': '', 'url': 'step2-open&set web(cmd).html'}, {'title': 'step3-save file(cmd)', 'text': 'after step4 \n 1.ctrl+c to off web \n 2.typ ".." back <cp2020> folder \n 3.git pull \n 4.git add . \n 5.git commit -m"version name" \n 6.git push \n', 'tags': '', 'url': 'step3-save file(cmd).html'}, {'title': 'Homework', 'text': '', 'tags': '', 'url': 'Homework.html'}, {'title': 'W8H', 'text': 'https://gitter.im/mdecourse/Fall2020 \xa0uploaded in Nov12 by KMOL. \n Made in\xa0 https://app.diagrams.net/ \xa0 \n \n cp2020(python) \n https://www.kaggle.com/mdecourse/cp2020w8/ \xa0 \n """\nsemester=1091\n\ncourseno=0762\n\ncp\n\n1a 1091/0762\n\n1b 1091/0776\n\ncad\n\n2a 1091/0788\n\n2b 1091/0801\n"""\n# 導入 urllib.request: https://docs.python.org/3/library/urllib.request.html\n# 透過 urllib.request 模組中的 urlopen() 開啟網路 url 連結資料\nimport urllib.request  # the lib that handles the url stuff\n# 定義一個輸入學期與課號,就能夠輸出各課程修課人員數列的函式\n\ndef getRegList(semester, courseno):\n    # 因為課號可能以 0 開頭, 因此採字串型別輸入, 為了一致, 輸入變數一律採字串輸入\n    target_url = "https://nfulist.herokuapp.com/?semester=" + semester + "&courseno=" + courseno\n    regList = []\n    for line in urllib.request.urlopen(target_url):\n        # 由於 urlopen() 取下的網際資料為 binary 格式, 可以透過 decode() 解碼為 ASCII 資料\n        regList.append(line.decode(\'utf-8\').rstrip())\n    # 此一函式利用 return 將資料傳回\n    return regList\n    \n#print(getRegList("1091", "0776"))\n\n\n# 1b_from_nfu.txt is one line file\n#with open("1b_from_nfu.txt") as f:\n\'\'\'\nwith open("/kaggle/input/w8data/1b_oneline.txt") as f:\n    # read() will read the whole content of file\n    cRead = f.read()\nprint(cRead)\n\'\'\'\n\nwith open("/kaggle/input/w8data/1a_from_nfu.txt") as f:\n    # read() will read the whole content of file\n    cRead = f.read()\nprint(cRead)\n\n\'\'\'\n\nwith open("/kaggle/input/1b_oneline.txt") as f:\n    # readline() only read one line\n    cReadline = f.readline()\n#print(cReadline)\n\nwith open("1b_from_nfu.txt") as f:\n    # readlines() will read line by line and put into list\n    cReadlines = f.readlines()\n#print(cReadlines)\n\n# user split() to cut cRead string into list with " "\ncReadSplit = cRead.split(" ")\n#print(cReadSplit)\n\nfor i in range(len(cReadSplit)):\n    print(cReadSplit[i])\n\'\'\' \n', 'tags': '', 'url': 'W8H.html'}, {'title': 'github.io&gitlab.io', 'text': '\n', 'tags': '', 'url': 'github.io&gitlab.io.html'}, {'title': 'Homework(team)', 'text': '', 'tags': '', 'url': 'Homework(team).html'}, {'title': 'teammate', 'text': '40923106 \n 40923108 \n 40923118 \n 40923120 \n 40923126 \n 40923128 \n 40923138 \n 40923145 \n 40923150 \n', 'tags': '', 'url': 'teammate.html'}, {'title': 'homework1', 'text': 'range:hardwear P77-P92 \n', 'tags': '', 'url': 'homework1.html'}, {'title': 'English(start to P77)', 'text': 'PCH 9 /Network Defined by Geography \n Overview In this module, we are going to cover the various types of networks, including local area networks, wide area networks, personal area networks, and metropolitan area networks. Next, we will cover the various network relationships, such as client/server and peer-to-peer, and focus on the types of resources our networks use. Finally, we will talk about the topologies of our networks, such as the bus, the ring, the star, the full mesh, and hybrid network topologies. \n Network Defined By Geography Networks are defined by the geography they cover. We start with the area around a single person, with this area being termed the personal area network (PAN). Next, we expand outward to the local area network (LAN), which can contain an entire office floor or building. Moving outward again, we have the metropolitan area network, which covers the area across the city by connecting multiple LANs together. Finally, we have the wide area network (WAN). This is the largest network we define by geography and it can go across the country or even across the world. A great example of a WAN is the Internet, since it connects many networks together and stretches across the globe. \n \n Personal Area Network A PAN has a very small range limited to just a few meters. If you stretch your hands out at your sides and spin around in a circle, this is the physical range of most PANs. Bluetooth is one of the main things we use to create a PAN, although USB and infrared can also be used for these networks. Bluetooth has a range between one meter and 100 meters depending on which class of Bluetooth you are using, but most common Bluetooth devices are class two devices limited to 10 meters. Some good examples of PANs are the connection between a USB hard drive and a laptop, or a Bluetooth cellphone connecting to your car stereo system wirelessly. \n Local Area Network \n The next type of network defined by geography is the LAN, which stands for local area network. The local area network is comprised of several devices that allow computers to connect to each other within a small geographic area. A LAN is, at its most basic, a connection of several workstations together using a hub, switch, or wireless access point. LANs have a limited distance associated with them, with each network segment usually limited to 100 meters or less. Generally, a LAN is used to network the floor of an office, or possibly the entire office building in smaller networks. LANs are generally connected in either a wired or wireless manner. If wired, they are connected using unshielded twisted pair cable using the Ethernet (IEEE 802.3) standard; if wireless, they are connected using Wi-Fi radio signal (IEEE 802.11) standards. \n \n Metropolitan Area Networks Another way we can geographically define our networks is as a MAN. A metropolitan area network connects scattered locations across the city or county. This covers a larger geographical area than a local area network, but also a much smaller area than a wide-area network. \n \n Wide Area Networks The WAN is used to connect network components that are geographically separated over vast distances together. An example of a WAN would be to connect an office in Los Angeles to another corporate office in New York. This can be done using virtual private networks (VPNs) over the Internet or using dedicated leased lines that would physically connect the city pairs together. Regardless of the method of connection, once the two local area networks from Los Angeles and New York are connected, they become part of the larger wide area network topology. \n \n \n In addition to defining networks by geography or how much area they cover, you can also define them by the way they allocate their resources. The first method is what we call a client/server model. In a client/server model, a dedicated server or servers provide(s) access to files, scanners, printers, and other resources to client workstations. This simplifies the administration and backup burden, making the network centrally administered, and can provide better security because resources can be allocated according to job function, network privilege, or department, since all of the resources are located on a few key servers. The second way of sharing resources on the network is called the peer-to-peer model. In the peer-to-peer model, all workstations are considered equals: each computer or workstation shares its resources directly with the other workstations. There is no central administration. For example, if I shared my printer with my coworkers, then each time my coworker printed a document, it would be sent to the printer through my workstation. The drawback to this is that if my computer is turned off, my coworkers lose access to my resources, such as my printer. The administration and backup under the peer-to-peer model is much more difficult, since resources are located on numerous workstations across the network, making administrative tasks burdensome. Furthermore, there is no real way of securing network resources when allowing access between nodes or workstations. The benefit of peer-to-peer resource sharing is the low cost of entry, since no dedicated servers or specialized operating systems are required to share the resources. \n Besides geography and relationships, we can also define our networks by their topology. When we define our networks by their topology, we consider both the physical and logical topology, and both of these topologies do not have to match for a single network. The physical topology determines how the devices are physically connected, while the logical topology determines how the traffic flows across the network in a logical manner. There are many types of topologies, including bus, ring, star, full mesh, and hybrid. Currently, the most widely used model is a physical star and a logical bus topology using Ethernet. Bus Topology Bus topology typically uses a single cable running through the area that needs network connectivity, with each device that wishes to connect to the network tapping into that cable. The devices tap into the cable using either a T connector (see diagram below) or a vampire tap. A vampire tap is actually a type of connection where a metal tooth bites into the cable, making a physical connection with the copper wire running inside the cable. While bus topology is an older technology and not commonly used anymore, physically, it can still be found as a logical implementation in some instances. \n \n Ring Topology Ring topology typically uses a cable running in a circular loop, with each device connected to the ring. Data travels in a single direction around the ring. The most common use of ring topology is with backbone fiber networks. Fiber distributed data interface (FDDI) is a set of standards for transmitting data on fiber-optic lines in a LAN. FDDI commonly uses two counter-rotating rings to provide more redundancy. Each device waits its turn to communicate on the ring by passing a token around the ring. Therefore, ring topology networks are also called token ring networks. As there are two counter-rotating rings, FDDI tends to provide a little more redundancy than a standard bus topology. However, both bus and ring topologies were quickly replaced in most LANs by the star topology. \n \n Star Topology Star topology is by far the most common topology in use today. We find star topologies in use in nearly all local area networks. All the devices of the star topology connect to a single point. That single point of connection can be a hub or switch. In most modern networks, the single connection point will be a switch. Star topologies are the dominant physical topology today, although they are not always used as the logical topology. Ethernet cabling, also known as unshielded twisted-pair, is very commonly employed in local area networks using a star configuration. However, fiber-optic connections can also be used for high-speed or high-security networks. The downside with the star topology is that it creates a single point of failure. If a central device such as a switch fails, the entire network fails as well. Star topologies have the benefit of reduced expense and make expansion very easy, unlike bus and ring network varieties. \n Full Mesh Topology To deal with the issue of redundancy, the full mesh topology was created. This topology is by far the most redundant, and expensive, topology because every node or workstation in the network is directly connected to every other node. While this provides optimal routing, it is very expensive to maintain and operate. The number of connections required for any number of nodes can be calculated by using the formula, x = n(n-1)/2. For example, if you have six nodes, that would require 15 cables to connect them all to each other. If you had 50 nodes, that would require 1225 separate connections. You can certainly see why this topology is almost never used for local area networks, as the number of machines would drive the number of connections up too quickly. \n Partial Mesh Topology To solve the cost issues created by the full mesh topology, engineers created the partial mesh topology. Partial mesh topology is really a hybrid full mesh topology. It provides redundancy and optimal routing between some sites, while avoiding the expense of connecting every single site. In order to create this successfully, though, you must consider the network traffic patterns to design it efficiently. \n EXAMPLE If we have two sites which are very busy, such as Los Angeles, CA and New York, NY, we may want to provide them with additional redundancy by connecting them to a third city, such as Washington, DC. But a slower site, maybe somewhere like Greenville, SC, might only need to be connected to one of those three sites and can then use that as a jumping off point to connect to the other two sites. This works very similar to our air travel system, where we connect the large cities together directly, and we avoid direct flights to small cities. For example, if someone wanted to fly from Greenville to Los Angeles they would first take a flight from Greenville to Washington DC, then a direct flight on a larger plane to Los Angeles from Washington. \n The same concept applies in a partial mesh topology. Partial mesh adds additional resources (connections) between the biggest and busiest sites, while still providing the smaller sites with minimal service to one of the large hub sites. The smaller site uses the large hub as a jumping off point to the rest of the network. \n \n PCH 10 /Networking Hardware \n Network Devices P81 Install a Network Adapter P82 \n PCH 10 /Network Devices \n Overview \n Network devices vary according to their purpose. In this module, we will discuss various devices, such as hubs, switches, routers, bridges, network adapters, and media. As we discuss the devices, you should pay attention to their uses, their benefits, and their limitations. We will also explore how to install a network adapter. \n Three basic types of Ethernet hubs are as follows: \n Passive hub – repeats signal with no amplification Active hub – repeats signal with amplification Smart hub – active hub with enhanced features (ex: SNMP) \n Hubs have no inherent security designed within them because they simply rebroadcast all the information received from one port to every other port. Essentially, hubs rely on the connected workstations to only “listen” to the information on their port if that information is specifically addressed to that workstation. When the information is not addressed to it, the workstation is supposed to simply ignore the data. But a network card can be placed into “promiscuous” mode, where it will listen to all traffic, regardless of which workstation that traffic is addressed to. This makes hubs very insecure. \n Another drawback of hubs is that they have to share bandwidth, as all devices operate in one collision domain. Therefore, if you have a 100 Mbps hub, but connect four devices to that hub, your devices will effectively be operating at 25 Mbps each. This can lead to huge slowdowns in your network traffic when using a 16-, 24-, or 48-port hub. \n \n Bridges Because hubs operate with all devices acting in a single collision domain, a network device that could break up that collision domain into smaller units is required to help the network operate more efficiently. For example, if a hub is connected to another hub, they both operate under a single collision domain . A bridge is used to connect two hubs together, but still keep the hubs’ collision domains separate. This interconnection of multiple network segments together allows networks to scale into large networks without significantly decreasing the performance of that network. Bridges are smarter than hubs; in fact, they actually analyze the source media access control (MAC) addresses in the frames entering the bridge and populate an internal MAC table based on those addresses. Future routing decisions are based upon those destination MAC addresses. This intelligent forwarding based on the destination MAC address in the frame allows for a decrease in network traffic by only forwarding information to the root hub associated with the network device. Network switches, which we will discuss, are the evolution of hubs and bridges. \n Switches Switches are used to connect multiple network segments together, whether they connect from switch to switch, or switch to workstation. Each port on a switch acts as its own collision domain. A switch is an evolution from a hub and bridge. Essentially, each port on a switch operates as if it were a hub with a bridge connecting the ports of the hub to the workstation, thereby reducing the chance of a collision on the network to zero. \n Switches are intelligent devices that make forwarding decisions based upon the MAC addresses they learn and place in their MAC tables. A switch analyzes the source MAC addresses in frames as they enter the switch, and then populates the switch’s internal MAC table with the addresses to match them with the switch ports. This allows the switch to forward the frame only to the correct device on a single switch port, thereby increasing security and network speed. \n If a switch receives a frame but does not have the destination MAC address in its forwarding table, it will flood the frame to all ports except the source to solicit the location of the destination MAC address. Switches break up collision domains but create broadcast domains . \n Security is increased because only the device to which the information is addressed can receive a copy, regardless of whether the card is in “promiscuous” mode. This is similar in operation to an old-fashioned telephone operator switchboard. If the information isn’t addressed to your port, your port won’t receive the information. Also, because each port is in its own collision domain, the network speed is increased. Regardless of how many devices are on the network, each switch port has full-speed operations, so for a 100 Mbps switch, each device operates at 100 Mbps. \n \n Routers Routers move data packets (layer 3), as opposed to switches (layer 2), which move frames. Routers separate network segments based on IP addressing and will only forward packets out of the segment when configured to do so. This design breaks up broadcast domains created by switches. It is up to the network professional to configure the router to connect different networks together and perform intelligent routing decisions. A router is most closely associated with a computer in that it has a processor and a sophisticated OS. The router compares the IP address of the source and destination of the packet and forwards traffic to/from a network based on this logical address (IPv4 and IPv6 addresses, for example). Routers are typically feature-rich devices and support a wide range of interface types, including unshielded twisted pair, fiber optic, and coaxial cable connections. Like a switch, each port on a router is a separate collision domain. Using access control lists, routers have the ability to block access to networks based on ports or addresses. This blocking adds to the network’s security. \n \n Network Adapter The network adapter is used to connect a workstation to the network through the use of media. The network adapter can be built in to the motherboard of the device in several ways: \n Using an integrated port cluster. Added to a workstation through the use of an internal expansion card (PCIe, PCI, or mini-PCIe). Through the use of an externally connected card, such as USB or PCMCIA. There are two main types of network adapters: wired and wireless. The wired cards support various cable types, such as unshielded twisted pair (UTP), fiber optic, and coaxial cabling. These various cable types are called media. \n Media Media is the term used to categorize the physical connection between two device ports, such as between a computer and a switch. Media is made up of copper cable, fiber-optic cable, or even radio frequency waves (as used in Wi-Fi networks). Media varies greatly in cost, from free for radio waves, to cheap for unshielded twisted pair (copper cable), to expensive for fiber-optic cabling. The type of media determines the bandwidth speed, capacity, and distance limitations for a particular network. We will discuss media in more depth in a future module. \n \n There are times when you may need to install an add-on network interface card (NIC). Current desktop motherboards should have a built-in NIC on the rear input/output (I/O) panel. Installing an add-on card can keep a machine in service if the built-in NIC is defective or if you need to upgrade to match the current local area network (LAN) specifications (i.e., from a 10/100 BaseT to 10/100/1000 or 10GBaseT). \n To install an NIC, follow these steps: \n 1.Check documentation to verify which NIC will match your expansion slots (PCI or PCIe)\xa0 \xa0 \xa0 \xa0 \xa0and the LAN requirements. Ensure that the adapter will work with the motherboard. 2.Power down the computer and disconnect the main power cord from the machine. 3.Following safe repair practice (proper grounding/anti-static strap), open the side cover of\xa0 \xa0 \xa0 \xa0the computer to inspect available expansion slots. 4.Match the connector/pinouts of the new NIC card and verify it matches the proposed slot. 5.Remove the corresponding computer PCI option slot cover from the back panel. 6.Line up the connector of the NIC to the expansion slot and seat it firmly as you guide the\xa0 \xa0 \xa0 \xa0bracket up to the back panel of the computer, ensuring proper alignment. Tighten the new\xa0 \xa0 \xa0NIC with the screw that is usually supplied. 7.Close the side cover of the computer following safe repair procedures. 8.Reconnect the main power cord. 9.Power up the machine. After the NIC hardware is installed, the drivers should install automatically, depending on the operating system. For Windows (Vista/Win7/Win8.1/Win10), verify connectivity in the network and sharing center. For Linux, go to network settings, and search online for the appropriate driver depending on the Linux distribution , such as Red Hat Linux or Ubuntu). \n \n In the lab below, you should install a new network interface card (NIC). In doing so, be sure that the card has the right pinout. Also, be sure to use proper ESD precautions. \n PCH 11 /Networking Media \xa0 Fiber-Optic Cable\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0P84 Twisted Pair Cable\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0P85 Coaxial Cable\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P86 Copper vs. Fiber\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P87 Converters\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P88 \n PCH 11 /Fiber-Optic Cable Overview In this module, we’re going to discuss the various types of network media. We will begin with fiber-optic cable and then discuss twisted pair cable and coaxial cable. For each of these cable types, we will discuss appearance, characteristics, and types of connectors, as well as speed and limitations. \n Fiber-Optic Cable Fiber-optic cables are constructed by using a glass core at the center of the cable that is surrounded by cladding. In order to send data from one end of the cable to the other, light from a light-emitting diode (LED) or laser is used to transmit the signal down the glass fiber at the center of the cable. Because the data is being transmitted using light, it is immune to the effects of electromagnetic interference (EMI) that impact traditional copper-based cables, such as twisted pair and coaxial cables. Fiber-optic cables possess the ability to send the data a very far distance (many miles) without the use of a repeater. They also can carry a significant amount of data due to their large bandwidth and the information traveling at light speed. Their bandwidth can be measured in gigabits or even terabits per second. There are two types of fiber cables: multimode and single-mode fiber. \n \n Multimode fiber cables (MMF) contain a larger core than the single-mode variety. The core size for a multimode fiber is 62.5 microns. A micron is a very small unit of measurement—it is actually even smaller than the width of a human hair. MMF’s larger core enables multiple modes of travel for the light from one end of the cable to the other. This allows a single fiber to carry multiple signals across it, with each signal being transmitted at a slightly different reflective angle. When the light reaches the destination, the signals are then converted back into 1s and 0s and passed to the computer by the network interface card. Multimode fiber is commonly used in shorter distance fiber connections, such as from a router to a switch, a switch to a switch, or a server to a switch. \n Single-mode fiber cables (SMF) contain a much smaller core than the multimode variety. The core size for SMF is 10 microns. SMF’s smaller core only allows for a single mode of travel for the light from one end of the cable to the other. This straight-through connection allows for data to travel longer distances without a repeater than it can travel using MMF. When the light reaches the destination, the signals are then converted back into 1s and 0s and passed to the computer by the network interface card. Single mode fiber is commonly used in very long distance fiber connections, such as a backbone connection from one local area network to another. \n Fiber-Optic Cable Connectors Fiber cables only come in the two types discussed above: single-mode and multimode. However, the ends of each of these cables come in four varieties. \n The subscriber connector (SC) is a fiber-optic cable connector that uses a push-pull mechanism to latch into the port, similar to common audio and video cables. If you want to enable bidirectional transmission for sending and receiving data, you need to have two fiber cables, so sometimes a dual SC connector is used. \n The straight tip (ST) connector is a fiber-optic cable connector that uses a bayonet plug and socket. It was the first de facto standard connector for most commercial wiring using fiber cables and it is very commonly found in fiber networks. \n The Lucent connector (LC) is a miniaturized version of the fiber-optic SC connector. It looks somewhat like the SC, but is half the size, with a 1.25 mm ferrule instead of 2.5 mm, making it very useful when connecting multiple devices in a small area, such as on a 24-port switch’s front panel. \n The mechanical transfer-registered jack (MT-RJ) connector is a fiber-optic cable connector that is very popular for small-form-factor devices due to its small size. This connector houses two fibers and mates with locating pins on the plug. These connectors are commonly found connecting a switch to a patch panel, because both devices have a limited area on their front panels. \n PCH 11 /Twisted Pair Cable \n While fiber-optic cable is great for its speed, distance, and security, it hasn’t yet become commonplace in most networks. Instead, we are still using the same type of cabling we have been using for the past two to three decades — twisted pair. Twisted pair cable is the most popular physical LAN media in the world today. Each cable contains four pairs of individually insulated strands of copper wire. Each pair is twisted together to minimize the amount of electromagnetic interference (EMI). The more twists there are in the cable, the less EMI there will be. Twisted pair cable is broken up into two types: unshielded twisted pair (UTP) and shielded twisted pair (STP). \n \n Shielded twisted pair cable is built very similarly to unshielded twisted pair, except that the pairs of wires are also surrounded by a metallic shielding (like foil). This outer foil shielding minimizes the EMI to which the cable is exposed. This increases the security and reliability of the cable. Unfortunately, however, this also increases the cost of the cable, so it is typically used only in high-production environments where the extra security is worth the extra cost. \n The more common type of cabling is unshielded twisted pair cable. Instead of using extra shielding, this cable relies on the twisting of its copper pairs to minimize the effects of EMI. Each twisted pair is twisted to insulate itself from the other pairs, and because there is no additional shielding, it is available at a lower cost than STP. Therefore, UTP is the most common media of choice for small office, home office, residential, and many commercial networks. \n \n Categorizing Twisted Pair Cable Twisted pair cable is categorized based on a category (cat) number. For example, cat 3, or category 3, is the oldest type of cable that we use. It was introduced back in the 1980s and 1990s for use in the first star topologies. The maximum throughput or bandwidth of cat 3 cabling is only 10 Mbps (megabits per second). The cat 3, like all twisted pair cabling, cannot go farther than 100 meters without using a repeater, switch, or active hub to amplify the signal. This limited distance is attributable to the copper wiring in these cables. As the signal travels over the copper wire, the natural resistance to the wire decreases the signal’s strength, and it eventually becomes too weak for the distant end to receive. For this reason, there is a 100 meter limitation when building and designing a twisted pair network. \n Cat 5 cables were an improvement on the older cat 3 cables and contain more twists, giving them more shielding from EMI and a maximum bandwidth of 100 Mbps. Cat 5e, or cat 5 enhanced, increased the speed of the maximum throughput to one Gbps, or 1000 Mbps, and became a gap filler until cat 6 cabling became commonplace. \n Cat 6a overcomes the 37-55 meter limitation of cat 6 when used in 10GBaseT. Cat 7, the newest standard, is shielded and provides connections up to 10 Gbps with a maximum distance of 100 meters. “Cat 7 and cat 7a cabling will be used for backbone connections between servers within a data center” and “provide an alternative to using fiber-optic cabling within the data center” (from http://www.cablestogo.com/learning/library/data-center/cat7-overview). \n All cable categories up to cat 5e and cat 6a have a maximum distance of 100 meters. When used in 10GBaseT, the maximum distance for cat 6 is 55 meters. Cat 7 is shielded and exceeds the 100 meter limit. As the category of the cable increases, so do the number of twists per inch and the frequency range, allowing for more data and improved protection against EMI. Best practice for copper cabling is not to run cable lengths to the maximum because attenuation will reduce data capacity. \n \n Twisted Pair Connectors Twisted pair cables come with three main types of connectors. The first is the RJ-45 connector, which is an eight-pin connector used in Ethernet networks. Even though most Ethernet networks use only four pins, the RJ-45 provides eight pins for future use and capabilities. The first four pins are used to transmit (two pins) and receive (two pins). \n The RJ-11 connector is used in the standard telephone system. The RJ-11 is a six-pin connector, but commonly only two pins are used for a telephone (transmit and receive). If you have a two-line phone, then four pins are used: two pins to transmit and two pins to receive. \n Finally, the DB-9 connector is used for RS-232 signals. This connector looks like a standard serial connector. It is used commonly for asynchronous serial communications, like connecting to an external modem. In modern networks, you will see this type of connector on a “rollover cable.” A rollover cable has a DB-9 on one side (which is connected to your laptop’s serial port), and an RJ-45 connector on the other side (which is used to connect to Cisco routers and switches to do administration tasks). \n A straight-through cable is a type of twisted pair cable that is used in local area networks to connect a computer to a network hub, such as a router. This type of cable is also sometimes called a patch cable. Both ends of the cable have an identical pinout, hence the name “straight-through.” A crossover cable switches the pinouts of the two ends of the cable, making the transmit and receive pins alternate on the two ends. This allows two workstations to connect directly to each other without the need for a hub, switch, or router. \n \n PCH 11 /Coaxial Cable \n Coaxial cable is a much older media technology. Coaxial cable, also known as coax for short, is composed of two conductors. The inner conductor, which is known as the insulated conductor (center wire), is the copper wire over which data is passed. The outer conductor is the braided metal shield and aids in protecting the inner wire from physical injury and the effects of EMI. Much like the shielding we saw in shielded twisted pair, the outer shield helps keep electromagnetic interference out of the data’s path. Between the inner conductor and the outer shield, we find an insulated core that prevents any data transfer between the inner core and outer shield. The outside of the cable is made of a flexible plastic jacket, much like the twisted pair cabling. Coaxial cabling was included in the first Ethernet standard as 10Base5 (thicknet) and continued to be used throughout updates as 10Base2 (thinnet) as well as being most commonly used in bus and ring networks. UTP cabling however, is easier to work with in a star topology and is significantly less expensive. \n \n Coaxial Cable Types There are three dominant coaxial cable types. The RG-6 is commonly used by cable TV companies to connect individual homes to the TV network. These cables are thick and usually used for outside connections to withstand the effects of the weather. The RG-58 is a type of coaxial cable that was heavily used in early 10Base2 (thinnet) networks, such as bus and ring topologies. Finally, the RG-59 is the traditional coaxial cable used to carry composite video between two nearby devices, such as your TV and the cable box. If you are a cable Internet user, this is also used to carry the WAN connection from your wall jack to your cable modem. \n Coaxial Cable Connectors While there were three types of cables, there are only two types of common connectors used with coaxial cable. The first is called BNC, from the name Bayonet Neill-Concelman. Sometimes people also call this the British Naval connector, because the BNC was heavily used by the British in their shipboard radio systems. This connector was commonly used in early Ethernet networks and it has a “push and twist” type of connector to secure the cable to the network device. \n \n The F-type connector is the modern type of coaxial cable connector. It is typically used for cable TV and cable modem connections. It is connected by screwing the connector onto a threaded jack to secure the connection. \n Photograph of a wall plate with five coaxial jacks. A coaxial cable with a blue band at the end is connected to one of the jacks. Coaxial jack. Photo used under CC-BY-NC-ND license from Kenneth Close. \n \n PCH 11 /Copper vs. Fiber When we compare the advantages and disadvantages of fiber-optic cables and copper (twisted pair) cables, we have to consider that fiber-optic has a higher bandwidth (measured in Gbps or Tbps), it can carry its signal many miles without the need of a repeater, it is immune to the effects of EMI, and it has much better security than traditional twisted pair cables. However, twisted pair cabling does hold some advantages of its own. For one, it is much less expensive than fiber-optic cabling. Also, copper wiring is much easier to install, taking only a few hours to learn. Finally, twisted pair cabling can be created and terminated using inexpensive tools. For example, a complete copper wiring toolset can be bought online for less than $50, while a complete fiber-optic kit may cost $1000 or more. For these reasons, copper has remained the dominant media in most local area networks. \n PCH 11 /Converters \n Because of the wide variety of cable and connector types, there is sometimes a need to convert from one type of media to another. For example, if you have to make a connection between two LANs in buildings that are located one mile apart, but your network uses Cat 5e, UTP cabling, how can you make that connection? When you look at your routers, you find they only accept RJ-45 connections, but you know that you cannot run a Cat 5e cable more than 100 meters. How can you solve this problem? With a media converter. \n Using a media converter, you can convert your RJ-45 connection into an ST, SC, or LC fiber connection, as shown in the image below. Then, you run the one-mile fiber cable to the other building, and use a media converter to convert from the ST, SC, or LC fiber connection back to the RJ-45 the other router requires. Because this is a simple, “dumb” device, it simply converts whatever is received on the first media type and repeats it back out the second media type. Common types of media converters are from Ethernet (copper) to fiber-optic (and back) or coaxial to fiber-optic (and back). \n Photograph of four converters stacked on top of each other. The two converters in the middle are identical. They are each labeled Black Box and have a power cord receptacle, an Ethernet port and two other ports. The converter on the top has an Ethernet port and two other ports. The converter on the bottom has an Ethernet port and two other ports. \n \n PCH 12 /Ethernet Standards \n Ethernet Standards\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P90 Ethernet Technology\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0P91 Carrier Sense Multiple Access/Collision Detect\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P92 Evolution of Standards\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0P93 Planning a Basic Network Connection Using 100/1000BaseT\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P95 Differentiating Between Ethernet and TCP/IP\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P96 \n PCH 12 /Ethernet Standards \n Overview \n  In this module, we are going to discuss how the various Ethernet standards developed over time. We will also discuss why there is a need for these standards and the effect of these standards on the industry. In addition, we are going to cover various types of network media standards. We will cover 10Base-T (802.3i, 1990) as well as 100Base-T and 1000Base-T (1GBASE-T or 1 GigE) Ethernet standards, which are most commonly found in current office networks. We will discover how to plan a basic network connection using 100BaseT. Finally, we will cover differences between Ethernet and TCP/IP. \n PCH 12 /Ethernet Technology \n \n Before Ethernet was the dominant technology, there were multiple types of networking technologies competing for market share. At one point, Ethernet was just one of many competing standards, including token ring, fiber distributed data interface (FDDI), and more. By the late 1990s, a single standard was clearly the dominant choice in both office and residential networks: IEEE 802.3 Ethernet. Ethernet uses various media types, from coaxial cable to twisted-pair copper and fiber-optic cables (discussed in an earlier module). The 802.3 Ethernet standard and the concept of using frames for communication over various media, including Wireless 802.11, is predominant today, and it is vital to understand the fundamentals of Ethernet including the various speed and distance limitations each standard places on our networks. \n The original 802.3 Ethernet standard sent data over coaxial cables at a half-duplex transmission rate which means devices can only transmit (TX) or Receive (RX) alternately at separate intervals because the data used the same path for both. This is analagous to communicating using a walkie-talkie rather than a telephone. \n This coaxial cable design became known as Thicknet and later Thinnet due to the size of the cables and was mostly used in bus and ring network topologies. \n Thicknet, the original IEEE 802.3 standard designated as 10Base5, provided a maximum bandwidth of 10Mbps and was limited in distance to 500 meters. Thinnet, or IEEE 10Base2, used a smaller type of coaxial and also provided a maximum bandwidth of 10 Mbps, but was limited to 185 meters. Eventually the industry transitioned from coaxial cabling to unshielded twisted-pair cabling. \n Twisted pair cabling, dubbed 10BaseT, provided the same 10 Mbps half-duplex maximum bandwidth with a category 3 cable, but the distance was limited to 100 meters due to the lack of the extra shield that coaxial provided. In spite of the increased attenuation (loss of signal strength over distance), network designers moved to twisted pair cabling because of ease of installation and overall lower cost. Coaxial cable fell out of favor and the 802.3 Ethernet standard continues to evolve with faster data rates over twisted pair cabling categories. \n The design question that Ethernet had to answer was how a device should access the network. The nature of half-duplex transmission (TX or RX) over a single wire pair meant that collisions were imminent. Should the access be deterministic and orderly, or contention-based and chaotic? The older ring-based networks, such as token ring, were developed upon the premise that order was necessary: each machine would wait for its turn to transmit its data until it received the electronic token that was passed around the ring. This is similar to the “talking stick” or “speaker’s staff” used by Native Americans and other aboriginal tribes where the staff (token) gave the person access to speak and the remaining group members listened. Ethernet, on the other hand, is premised upon a contention-based model. This is more chaotic and allows any device on the network to transmit anytime it wishes. The problem with this type of philosophy is figuring out how to prevent two devices from transmitting at the same time and causing a collision of the data. With Ethernet, the answer came in the form of a media access control method called carrier sense multiple access/collision detect (CSMA/CD). \n PCH 12 /Carrier Sense Multiple Access/Collision Detect \n \n The nature of half-duplex transmission brought about the need for CSMA/CD, which works by allowing all devices to transmit data whenever they wish. The carrier sense portion means that the device “listens” to the network first to find a “break” in the conversation. If the device doesn’t hear other devices transmitting, then it begins its transmission. Multiple access refers to every device having equal access to the network at all times. This is unlike the token ring network in which each device had to wait for the signal (token) before transmitting. Finally, we have collision detection as part of the CSMA/CD control method. If, by chance, two devices both were ready to transmit, they “listened” to the network for a “lull” in the conversation, and both started transmitting at the same time, the devices are able to detect that they both transmitted at the same time and caused a collision. \n The image below depicts both the CSMA/CD and CSMA/CA simplified algorithm. The left branch is CSMA/CD used by half-duplex Ethernet and the right branch is CSMA/CA used by 802.11 wireless LAN, which is also half-duplex. \n \n In the example shown below, four devices are connected in a physical bus topology. Each device has equal access to the network. Here, all the devices are listening, trying to determine if any other device is communicating before beginning transmission. \n \n In the next image below, we see an example of two devices that transmitted at the same time. This simultaneous transmission resulted in a data collision, causing the transmission to be broken. \n \n When a collision is detected, both devices choose a backoff time at random, and then attempt to retransmit again. In the diagram below, the computers choose to wait 200 milliseconds and 300 milliseconds, respectively. When that time is up, they will attempt to sense if another machine is already transmitting. If there is nothing detected, the first machine will transmit its message. Once completed, the second machine will then transmit its message, after its 300 millisecond wait time. \n \n', 'tags': '', 'url': 'English(start to P77).html'}, {'title': '中文(從P77開始)', 'text': 'PCH 9 /拓撲定義的網絡 \n 總覽 \xa0 \xa0 \xa0 在本模塊中，我們將涵蓋各種類型的網絡，包括局域網，廣域網，個人局域網和城域網。接下來，我們將介紹各種網絡關係，例如:客戶端/服務器和對等網絡，並重點介紹網絡使用的資源類型。最後，我們將討論我們的網絡拓撲，例如:總線，環形，星形，全網格和混合網絡拓撲。 地理定義的網絡  網絡由它們所覆蓋的地理位置定義。我們從一個人周圍的區域開始，將該區域稱為個人區域網絡（PAN）。接下來，我們向外擴展到局域網（LAN），該局域網可以包含整個辦公樓層或建築物。再次向外移動，我們有了城域網，該城域網通過將多個LAN連接在一起而覆蓋了整個城市。最後，我們有廣域網（WAN）。這是我們按地理位置定義的最大網絡，它可以遍及全國，甚至遍及全球。WAN就是一個很好的例子，因為Internet將許多網絡連接在一起並遍及全球。 個人區域網  PAN的範圍很小，只有幾米。如果您將雙手伸向兩側並轉一圈，則這是大多數PAN的物理範圍。藍牙是我們用於創建PAN的主要內容之一，儘管USB和紅外也可以用於這些網絡。藍牙的範圍在1米至100米之間，具體取決於您使用的藍牙類別，但是大多數常見的藍牙設備是限於10米的第二類設備。PAN的一些很好的例子是USB硬盤驅動器和筆記本電腦之間的連接，或者是無線連接到汽車立體聲系統的藍牙手機。 局域網  地理定義的下一種網絡類型是LAN，它代表局域網。局域網由幾個設備組成，這些設備使計算機可以在一個較小的地理區域內相互連接。局域網最基本的是使用集線器，交換機或無線訪問點將多個工作站連接在一起。局域網的距離有限，每個網段通常限制在100米或更短。通常，LAN用於將辦公室地板或較小網絡中的整個辦公樓聯網。LAN通常以有線或無線方式連接。如果已連接，則使用符合以太網（IEEE 802.3）標準的非屏蔽雙絞線電纜進行連接；如果為無線，則它們使用Wi-Fi無線電信號（IEEE 802.11）標准進行連接。 都會網 \n \xa0 \xa0 \xa0 我們可以在地理上定義網絡的另一種方法是將其作為MAN。城域網連接整個城市或縣的分散位置。這比局域網覆蓋更大的地理區域，但是比廣域網覆蓋的區域小得多。 廣域網 \xa0 \xa0 \xa0 WAN用於將地理位置遙遠的網絡組件連接在一起。WAN的一個示例是將洛杉磯的辦公室連接到紐約的另一公司辦公室。這可以通過Internet上的虛擬專用網絡（VPN）或使用將城市對實際連接在一起的專用租用線路來完成。無論採用哪種連接方法，來自洛杉磯和紐約的兩個局域網一旦連接，它們便成為更大的廣域網拓撲的一部分。 \n \xa0 \xa0 \xa0 除了按地理位置或網絡覆蓋範圍定義網絡外，您還可以通過它們分配資源的方式來定義網絡。第一種方法就是我們所說的客戶/服務器模型。在客戶端/服務器模型中，一個或多個專用服務器向客戶端工作站提供對文件，掃描儀，打印機和其他資源的訪問。由於所有資源都位於幾個關鍵服務器上，因此可以根據作業功能，網絡特權或部門分配資源，這簡化了管理和備份負擔，使網絡可以集中管理，並且可以提供更好的安全性。在網絡上共享資源的第二種方法稱為對等模型。在對等模型中，所有工作站都被認為是相等的：每台計算機或工作站都直接與其他工作站共享其資源。沒有中央管理。例如，如果我與同事共享打印機，那麼每次同事打印文檔時，該文檔都會通過工作站發送到打印機。這樣做的缺點是，如果關閉計算機，我的同事將無法訪問我的資源，例如打印機。對等模型下的管理和備份要困難得多，因為資源位於網絡上的眾多工作站上，這使管理任務變得很繁重。此外，當允許節點或工作站之間進行訪問時，沒有真正的方法來保護網絡資源。點對點資源共享的好處是入門成本低。 \n \xa0 \xa0 \xa0 除了地理和關係之外，我們還可以通過其拓撲定義網絡。當我們根據網絡的拓撲定義網絡時，我們會同時考慮物理和邏輯拓撲，並且這兩種拓撲都不必針對單個網絡進行匹配。物理拓撲決定了設備的物理連接方式，而邏輯拓撲決定了流量如何以邏輯方式流經網絡。拓撲類型很多，包括總線，環形，星形，全網格和混合拓撲。當前，使用最廣泛的模型是使用以太網的物理星形和邏輯總線拓撲。 \n 總線拓撲 \xa0 \xa0 \xa0 總線拓撲通常使用一根電纜穿過需要網絡連接的區域，每個希望連接到網絡的設備都通過該電纜連接。設備使用T型連接器（請參見下圖）或吸血鬼抽頭插入電纜。吸血鬼抽頭實際上是一種連接，其中金屬齒咬入電纜，與電纜內部的銅線進行物理連接。儘管總線拓撲是一種較舊的技術，在物理上已不再使用，但在某些情況下仍可以將其作為邏輯實現。 環形拓撲 \xa0 \xa0 \xa0 環形拓撲通常使用圓形環路中的電纜，每個設備都連接到環形。數據在環上沿單個方向傳播。環形拓撲最常見的用途是與骨幹光纖網絡一起使用。光纖分佈式數據接口（FDDI）是用於在LAN中的光纖線上傳輸數據的一組標準。FDDI通常使用兩個反向旋轉的環來提供更多的冗餘。每個設備都通過在令牌環周圍傳遞令牌來等待其在令牌環上進行通信。因此，環形拓撲網絡也稱為令牌環網絡。由於有兩個反向旋轉的環，因此FDDI傾向於提供比標準總線拓撲更多的冗餘。但是，在大多數LAN中，總線和環形拓撲都很快被星形拓撲取代。 星型拓撲 \xa0 \xa0 \xa0 星形拓撲是迄今為止使用的最常見的拓撲。我們發現幾乎所有局域網都使用星型拓撲。星型拓撲的所有設備都連接到一個點。單個連接點可以是集線器或交換機。在大多數現代網絡中，單個連接點將是一個交換機。星形拓撲是當今主要的物理拓撲，儘管它們並不總是用作邏輯拓撲。以太網電纜，也稱為非屏蔽雙絞線，在採用星形配置的局域網中非常普遍。但是，光纖連接也可以用於高速或高安全性網絡。星形拓撲的缺點是會造成單點故障。如果中央設備（如交換機）發生故障，整個網絡也會失敗。與總線和環形網絡品種不同，星形拓撲結構具有減少費用並易於擴展的優勢。 \n 全網狀拓撲 為了解決冗餘問題，創建了全網狀拓撲。到目前為止，此拓撲是最冗餘，最昂貴的拓撲，因為網絡中的每個節點或工作站都直接連接到每個其他節點。儘管這提供了最佳的路由，但維護和操作非常昂貴。可以使用公式x = n（n-1）/ 2計算任意數量的節點所需的連接數。例如，如果您有六個節點，則需要15條電纜才能將它們彼此連接。如果您有50個節點，則需要1225個單獨的連接。您當然可以看到為什麼幾乎不將該拓撲用於局域網的原因，因為計算機數量過多會導致連接數量增加過快。 部分網格拓撲 \xa0 \xa0 \xa0 為了解決由全網格拓撲創建的成本問題，工程師創建了部分網格拓撲。部分網狀拓撲實際上是混合全網狀拓撲。它提供了某些站點之間的冗餘和最佳路由，同時避免了連接每個站點的開銷。但是，為了成功創建它，必須考慮網絡流量模式以進行有效設計。 \n 例子 \xa0 \xa0 \xa0 如果我們有兩個非常繁忙的站點，例如加利福尼亞州的洛杉磯和紐約州的紐約，我們可能希望通過將它們連接到第三個城市（例如華盛頓特區）為他們提供更多的冗餘。但是，速度較慢的站點（例如，南卡羅來納州格林維爾）可能只需要連接到這三個站點之一，然後就可以將其用作連接其他兩個站點的起點。這與我們的航空旅行系統非常相似，在航空旅行系統中，我們將大城市直接連接在一起，並且避免了直接飛往小城市的航班。例如，如果有人想從格林維爾飛往洛杉磯，他們會先從格林維爾飛往華盛頓特區，然後再乘較大的飛機直接從華盛頓飛往洛杉磯。 \n \xa0 \xa0 \xa0 相同的概念適用於部分網格拓撲。部分網狀網絡在最大和最繁忙的站點之間添加了額外的資源（連接），同時仍為大型站點之一提供較小的站點，但服務卻最少。較小的站點將大型集線器用作連接到網絡其餘部分的起點。 \n PCH 10 /網絡硬件 \n 網絡設備\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0P81 安裝網絡適配器\xa0 \xa0 \xa0 P82 \n PCH 10 /網絡設備 總覽 \xa0 \xa0 \xa0 網絡設備根據其用途而有所不同。在本模塊中，我們將討論各種設備，例如集線器，交換機，路由器，網橋，網絡適配器和媒體。在討論設備時，您應注意其用途，優點和局限性。我們還將探討如何安裝網絡適配器。 \n 樞紐 \xa0 \xa0 \xa0 集線器是最簡單的網絡設備之一，用於將多個網絡設備和工作站相互連接，從而形成一個網絡。集線器也稱為多端口中繼器。集線器通過在一個端口中接收信號並將該信號重新廣播到其所有其他端口來工作。標準集線器沒有任何“智能”（能夠根據不同情況或要求進行更改的能力），因此我們通常將它們稱為“啞集線器”。集線器可以分為主動或被動兩種。活動集線器會在其所有端口上重複接收到的信號，並將該信號放大到最大強度。無源集線器僅重複信號而不增加任何放大。集線器是一種較舊的技術，可用於輕鬆增加可用端口的數量，但這會導致過多的網絡錯誤和衝突。集線器有較新的變體，稱為智能集線器。智能集線器實質上是具有增強功能集（例如，使用簡單網絡管理協議（SNMP））的活動集線器。 \n 以太網集線器的三種基本類型如下： \n 無源集線器–重複信號而不放大 有源集線器–重複放大信號 智能集線器–具有增強功能的活動集線器（例如：SNMP） 集線器內部沒有設計固有的安全性，因為它們只是將從一個端口接收的所有信息轉發到另一個端口。本質上，集線器僅依賴於連接的工作站來“偵聽”其端口上的信息（如果該信息專門針對該工作站）。當信息沒有發送給它時，工作站應該只是忽略數據。但是，可以將網卡置於“混雜”模式，在該模式下，網卡將偵聽所有流量，而不管該流量指向哪個工作站。這使集線器非常不安全。 \n 集線器的另一個缺點是它們必須共享帶寬，因為所有設備都在一個衝突域中運行。因此，如果您有一個100 Mbps的集線器，但將四個設備連接到該集線器，則每個設備將有效地以25 Mbps的速度運行。使用16端口，24端口或48端口集線器時，這可能會導致網絡流量大幅下降。 \n 橋樑 \xa0 \xa0 \xa0 因為集線器與所有在單個衝突域中起作用的設備一起運行，所以需要一個可以將該衝突域分解為較小單元的網絡設備，以幫助網絡更高效地運行。例如，如果一個集線器連接到另一個集線器，則它們都在單個衝突域下運行 。橋用於將兩個集線器連接在一起，但仍使集線器的衝突域保持分離。多個網段的這種互連在一起使網絡可以擴展為大型網絡，而不會顯著降低該網絡的性能。橋比集線器更智能；實際上，他們實際上是在分析源 媒體訪問控制（MAC）地址在進入網橋的幀中，並根據這些地址填充內部MAC表。未來的路由決策將基於那些目標MAC地址。通過僅將信息轉發到與網絡設備關聯的根集線器，這種基於幀中目標MAC地址的智能轉發可減少網絡流量。我們將討論的網絡交換機是集線器和網橋的演進。 \n 開關 \xa0 \xa0 \xa0 交換機用於將多個網段連接在一起，無論它們是從交換機到交換機還是從工作站到工作站。交換機上的每個端口都充當其自己的衝突域。交換機是集線器和網橋的演進。本質上，交換機上的每個端口都像是集線器一樣工作，帶有將集線器的端口連接到工作站的網橋，從而將網絡衝突的機會降低到零。 \n 交換機是智能設備，它們根據其學習到的MAC地址並放置在其MAC表中來做出轉發決策。交換機在輸入源MAC地址時會對其進行分析，然後以幀的形式填充源MAC地址，以使其與交換機端口匹配。這樣，交換機就可以將幀僅轉發到單個交換機端口上的正確設備，從而提高安全性和網絡速度。 \n 如果交換機接收到幀，但在其轉發表中沒有目標MAC地址，則它將將該幀泛洪到除源之外的所有端口上，以請求目標MAC地址的位置。交換器分解衝突域，但創建 廣播域。 \n 安全性提高了，因為無論信息卡是否處於“混雜”模式，只有信息所針對的設備才能收到副本。這在操作上類似於老式的電話接線員總機。如果該信息未發送到您的端口，則您的端口將不會收到該信息。另外，由於每個端口都在其自己的衝突域中，因此網絡速度得以提高。無論網絡上有多少設備，每個交換機端口都可以全速運行，因此對於100 Mbps交換機，每個設備都以100 Mbps的速度運行。 \n 路由器 \xa0 \xa0 \xa0 \xa0路由器移動數據包（第3層），而交換機則移動幀（第2層）。路由器根據IP地址將網段分開，並且僅在配置時將數據包轉發出網段。這種設計可以分解由交換機創建的廣播域。由網絡專業人員決定將路由器配置為將不同的網絡連接在一起並執行智能路由決策。路由器與計算機的關係最為密切，因為它具有處理器和完善的操作系統。路由器比較數據包源和目標的IP地址，並基於此邏輯地址（例如，IPv4和IPv6地址）將流量轉發到網絡或從網絡轉發流量。路由器通常是功能豐富的設備，並且支持多種接口類型，包括非屏蔽雙絞線，光纖和同軸電纜連接。像交換機一樣，路由器上的每個端口都是一個單獨的衝突域。使用訪問控制列表，路由器可以根據端口或地址阻止對網絡的訪問。這種阻塞增加了網絡的安全性。 \n 網絡適配器 \xa0 \xa0 \xa0 網絡適配器用於通過使用媒體將工作站連接到網絡。可以通過幾種方式將網絡適配器內置到設備的主板中： \n 使用集成端口集群。 通過使用內部擴展卡（PCIe，PCI或mini-PCIe）添加到工作站。 通過使用外部連接的卡，例如USB或PCMCIA。 網絡適配器有兩種主要類型：有線和無線。有線卡支持各種電纜類型，例如非屏蔽雙絞線（UTP），光纖和同軸電纜。這些各種電纜類型稱為媒體。 \n 媒體 \xa0 \xa0 \xa0 媒體是用於對兩個設備端口之間（例如計算機和交換機之間）的物理連接進行分類的術語。介質由銅纜，光纜或什至是射頻波（用於Wi-Fi網絡）組成。介質的成本差異很大，從無線電波的免費成本到非屏蔽雙絞線（銅纜）的價格便宜，再到光纖電纜的價格昂貴。媒體的類型確定特定網絡的帶寬速度，容量和距離限制。我們將在以後的模塊中更深入地討論媒體。 \n 有時您可能需要安裝附加網絡接口卡（NIC）。 當前的台式機主板的後方輸入/輸出（I / O）面板上應具有內置的NIC。 如果內置NIC出現故障或需要升級以匹配當前的局域網（LAN）規格（即從10/100 BaseT到10/100），則安裝附加卡可以使機器保持運行狀態。 / 1000或10GBaseT）。 \n 要安裝NIC，請按照下列步驟操作： \n 1.檢查文檔以確認哪個NIC將與您的擴展插槽（PCI或PCIe）和LAN要求相匹配。確保適配器可與主板配合使用。 2.關閉計算機電源，然後從計算機上斷開主電源線。 3.按照安全維修慣例（正確的接地/防靜電皮帶），打開計算機的側蓋，檢查可用的擴展槽。 4.匹配新NIC卡的連接器/引腳，並驗證它是否與建議的插槽匹配。 5.從背面板上卸下相應的計算機PCI選件插槽蓋。 6.將NIC的連接器對準擴展插槽，並在將支架向上推至計算機的背面板上時將其牢固就位，以確保正確對齊。用通常提供的螺釘擰緊新的NIC。 7.請按照安全維修步驟關閉計算機的側蓋。 8.重新連接主電源線。 9.打開機器電源。 安裝NIC硬件後，驅動程序應根據操作系統自動安裝。對於Windows（Vista / Win7 / Win8.1 / Win10），請驗證網絡和共享中心中的連接。對於Linux，請轉到網絡設置，然後根據Linux發行版（例如Red Hat Linux或Ubuntu）在線搜索適當的驅動程序 。 \n PCH 11 /網絡媒體 \n 光纖電纜 P84 雙絞線\xa0 \xa0 P85 同軸電纜 P86 銅與光纖 P87 轉換器\xa0 \xa0 P88 \n PCH 11\xa0 /光纖電纜 總覽 在本模塊中，我們將討論各種類型的網絡媒體。我們將從光纖電纜開始，然後討論雙絞線電纜和同軸電纜。對於每種電纜類型，我們將討論連接器的外觀，特性和類型，以及速度和限制。 \n 光纖電纜 光纖電纜是通過在電纜的中心使用玻璃芯構成的，該芯層被包層圍繞。為了將數據從電纜的一端發送到另一端，可使用來自發光二極管（LED）或激光的光沿電纜中心的玻璃纖維向下傳輸信號。由於數據是通過光傳輸的，因此不受電磁干擾（EMI）的影響，電磁干擾會影響傳統的銅基電纜，如雙絞線和同軸電纜。光纖具有無需使用中繼器就可以很遠的距離（許多英里）發送數據的能力。由於它們的大帶寬和以光速傳播的信息，它們還可以攜帶大量數據。它們的帶寬可以每秒千兆比特或什至兆兆比特來度量。 \n 多模光纜（MMF）的芯線比單模光纜大。多模光纖的纖芯尺寸為62.5微米。微米是非常小的度量單位，實際上甚至比人類頭髮的寬度還小。MMF的較大芯線實現了從電纜一端到另一端的多種傳播模式。這樣一來，單根光纖就可以在其上傳輸多個信號，而每個信號的反射角度都會稍有不同。當光線到達目的地時，信號然後被轉換回1s和0s，並通過網絡接口卡傳遞到計算機。多模光纖通常用於較短距離的光纖連接中，例如從路由器到交換機，從交換機到交換機或從服務器到交換機。 \n 單模光纜（SMF）的芯線比多模光纜小得多。SMF的芯尺寸為10微米。SMF的較小芯線僅允許光從電纜一端到另一端的單一傳播模式。這種直通連接允許數據在沒有中繼器的情況下傳輸的距離比使用MMF傳輸的距離更長。當光線到達目的地時，信號然後被轉換回1s和0s，並通過網絡接口卡傳遞到計算機。單模光纖通常用於超長距離的光纖連接中，例如從一個局域網到另一個局域網的骨干連接。 \n 光纖電纜連接器 光纖電纜僅屬於上述兩種類型：單模和多模。但是，每條電纜的末端都有四種。 \n 用戶連接器（SC）是一種光纖電纜連接器，與普通的音頻和視頻電纜類似，它使用推挽機制鎖入端口。如果要啟用雙向傳輸以發送和接收數據，則需要使用兩根光纖電纜，因此有時會使用雙SC連接器。 \n 筆直（ST）連接器是使用卡口插頭和插座的光纖電纜連接器。它是大多數使用光纖電纜進行商業佈線的第一個事實上的標準連接器，並且在光纖網絡中非常常見。 \n 朗訊連接器（LC）是光纖SC連接器的微型版本。它看上去有點像SC，但尺寸只有一半，只有1.25毫米而不是2.5毫米的插芯，因此在小區域（例如24端口交換機的前面板）連接多個設備時非常有用。 \n 機械傳輸註冊插孔（MT-RJ）連接器是一種光纖電纜連接器，由於其尺寸小，在小型設備中非常受歡迎。該連接器容納兩根光纖，並與插頭上的定位銷配對。通常發現這些連接器將開關連接到配線架，因為兩個設備的前面板都有有限的區域。 \n PCH 11 /雙絞線 \n 儘管光纜在速度，距離和安全性方面都非常出色，但在大多數網絡中尚未普及。相反，我們仍在使用過去兩到三十年來一直使用的相同類型的電纜-雙絞線。雙絞線電纜是當今世界上最流行的物理LAN介質。每條電纜包含四對獨立絕緣的銅線。每對絞合在一起以最大程度地減少電磁干擾（EMI）。電纜中的扭曲越多，EMI越小。雙絞線分為兩種類型：非屏蔽雙絞線（UTP）和屏蔽雙絞線（STP）。 \n 屏蔽雙絞線電纜的構造與非屏蔽雙絞線非常相似，不同之處在於，成對的電線也被金屬屏蔽層（如金屬箔）圍繞。外部箔屏蔽層可最大程度地減少電纜所遭受的EMI。這增加了電纜的安全性和可靠性。但是，不幸的是，這也增加了電纜的成本，因此通常僅在高生產環境中使用，在這種環境中，額外的安全性值得額外的成本。 \n 電纜的最常見類型是非屏蔽雙絞線電纜。 該電纜不使用額外的屏蔽，而是依靠其銅線對的絞合來最大程度地減小EMI的影響。 每個雙絞線都經過絞合，以使其自身與其他雙絞線絕緣，並且由於沒有額外的屏蔽，因此可以以比STP更低的成本獲得。 因此，UTP是小型辦公室，家庭辦公室，住宅和許多商業網絡中最常見的選擇媒體。 \n 分類雙絞線電纜 雙絞線電纜根據類別（類別）編號進行分類。例如，類別3（或類別3）是我們使用的最古老的電纜類型。它是在1980年代和1990年代引入的，用於第一批星形拓撲。Cat 3電纜的最大吞吐量或帶寬僅為10 Mbps（兆位/秒）。與所有雙絞線電纜一樣，如果不使用中繼器，交換機或有源集線器來放大信號，則Cat 3不能走超過100米。這種有限的距離歸因於這些電纜中的銅線。當信號在銅線上傳輸時，導線的自然電阻會降低信號的強度，並且最終變得太弱而無法接收遠端。為此原因， \n Cat 5電纜是對較舊的Cat 3電纜的改進，並包含更多的絞合線，從而使它們具有更大的EMI屏蔽能力，最大帶寬為100 Mbps。Cat 5e或Cat 5增強了，將最大吞吐量的速度提高到1 Gbps或1000 Mbps，並成為了空白，直到Cat 6電纜變得司空見慣。 \n 當在10GBaseT中使用時，Cat 6a克服了Cat 6的37-55米的限制。最新標準Cat 7被屏蔽，並提供高達10 Gbps的連接，最大距離為100米。“ Cat 7和Cat 7a電纜將用於數據中心內服務器之間的主干連接”，並且“提供在數據中心內使用光纖電纜的替代方法”（來自 http://www.cablestogo.com/learning/庫/數據中心/ cat7-overview）。 \n 直至類別5e和類別6a的所有電纜類別的最大距離為100米。在10GBaseT中使用時，類別6的最大距離為55米。Cat 7被屏蔽並超過100米的限制。隨著電纜類別的增加，每英寸的絞合數和頻率範圍也會增加，從而可以提供更多的數據並改善對EMI的保護。銅纜佈線的最佳實踐是不要使電纜長度最大，因為衰減會降低數據容量。 \n 雙絞線連接器 雙絞線電纜帶有三種主要類型的連接器。第一個是RJ-45連接器，它是以太網網絡中使用的八針連接器。即使大多數以太網僅使用四個引腳，RJ-45仍提供八個引腳供將來使用和使用。前四個引腳用於發送（兩個引腳）和接收（兩個引腳）。 \n RJ-11連接器用於標準電話系統。RJ-11是一個六針連接器，但電話通常僅使用兩個針（發送和接收）。如果您有兩線電話，則使用四個引腳：兩個引腳用於發送，兩個引腳用於接收。 \n 最後，DB-9連接器用於RS-232信號。該連接器看起來像標準的串行連接器。它通常用於異步串行通信，例如連接到外部調製解調器。在現代網絡中，您將在“翻轉電纜”上看到這種類型的連接器。翻轉電纜的一側為DB-9（連接到筆記本電腦的串行端口），另一側為RJ-45連接器（用於連接到Cisco路由器和交換機以執行管理任務）。 \n 直通電纜是雙絞線電纜的一種，在局域網中用於將計算機連接到網絡集線器（例如路由器）。這種類型的電纜有時也稱為跳線。電纜的兩端都具有相同的引出線，因此名稱為“直通”。交叉電纜切換電纜兩端的引出線，使發送和接收引腳在兩端交替。這允許兩個工作站直接相互連接，而無需集線器，交換機或路由器。 \n PCH 11 /同軸電纜 \n 同軸電纜是一種較老的媒體技術。同軸電纜（也簡稱為同軸電纜）由兩個導體組成。內部導體（稱為絕緣導體（中心線））是在其上傳遞數據的銅線。外導體是編織的金屬屏蔽層，有助於保護內線免受物理傷害和EMI的影響。就像我們在屏蔽雙絞線中看到的屏蔽一樣，外部屏蔽有助於將電磁干擾保持在數據路徑之外。在內部導體和外部屏蔽層之間，我們找到了一個絕緣芯，可防止在內芯和外部屏蔽層之間進行任何數據傳輸。電纜的外部由柔軟的塑料護套製成，非常類似於雙絞線電纜。同軸電纜已包含在第一個以太網標準中，稱為10Base5（Thicknet），並在整個更新中繼續用作10Base2（Thinnet），並且在總線和環形網絡中最常用。但是，UTP電纜更容易在星形拓撲中使用，並且價格便宜得多。 同軸電纜類型 共有三種主要的同軸電纜類型。有線電視公司通常使用RG-6將單個房屋連接到電視網絡。這些電纜很粗，通常用於外部連接以承受天氣的影響。RG-58是一種同軸電纜，在諸如總線和環形拓撲之類的早期10Base2（瘦網）網絡中大量使用。最後，RG-59是傳統的同軸電纜，用於在電視和電纜盒等兩個附近的設備之間傳送複合視頻。如果您是有線Internet用戶，這也可用於將WAN連接從牆壁插孔連接到電纜調製解調器。 \n 同軸電纜連接器 雖然有三種類型的電纜，但同軸電纜僅使用兩種類型的普通連接器。第一個稱為BNC，名稱為刺刀Neill-Concelman。有時人們也將其稱為英國海軍連接器，因為英國人在其艦載無線電系統中大量使用了BNC。該連接器通常用於早期的以太網網絡，並且具有“推壓式”連接器，用於將電纜固定到網絡設備。 \n F型連接器是現代類型的同軸電纜連接器。它通常用於有線電視和電纜調製解調器的連接。通過將連接器擰到帶螺紋的插孔上進行連接以固定連接。 \n PCH 11 /銅與光纖 \n 當我們比較光纖電纜和銅纜（雙絞線）的優缺點時，我們必須考慮到光纖具有更高的帶寬（以Gbps或Tbps為單位），它可以將信號傳輸很多英里而無需作為中繼器，它不受EMI的影響，並且比傳統的雙絞線電纜具有更好的安全性。但是，雙絞線電纜確實具有其自身的一些優點。首先，它比光纖電纜便宜得多。而且，銅線的安裝更容易，只需幾個小時即可學習。最後，可以使用廉價的工具創建和終止雙絞線電纜。例如，一個完整的銅佈線工具集可以在網上購買，價格不到50美元，而一個完整的光纖套件的價格可能在1000美元以上。由於這些原因。 \n PCH 11 /轉換器 \n 由於電纜和連接器的類型多種多樣，因此有時需要從一種類型的媒體轉換為另一種類型的媒體。例如，如果您必須在相距一英里的建築物中的兩個LAN之間建立連接，但是您的網絡使用Cat 5e，UTP電纜，那麼如何建立連接？當您查看路由器時，會發現它們僅接受RJ-45連接，但您知道不能將Cat 5e電纜的長度超過100米。您如何解決這個問題？帶媒體轉換器。 \n 使用媒體轉換器，您可以將RJ-45連接轉換為ST，SC或LC光纖連接，如下圖所示。 然後，將一英里的光纜連接到另一座建築物，並使用媒體轉換器將ST，SC或LC光纖連接轉換回另一台路由器所需的RJ-45。 因為這是一個簡單的“啞”設備，所以它僅轉換在第一媒體類型上接收到的所有內容，然後將其重複播放回第二媒體類型。 媒體轉換器的常見類型是從以太網（銅）到光纖（然後向後）或從同軸電纜到光纖（然後向後）。 \n \n PCH 12 /以太網標準 \n 以太網標準\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P90 以太網技術\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P91 載波偵聽多路訪問/衝突檢測\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0P92 標準的演變\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P93 使用100 / 1000BaseT規劃基本的網絡連接 P94 區分以太網和TCP / IP\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 P95 \n PCH 12 /以太網標準 總覽 在本模塊中，我們將討論隨著時間的推移如何開發各種以太網標準。我們還將討論為什麼需要這些標準以及這些標準對行業的影響。另外，我們將涵蓋各種類型的網絡媒體標準。我們將介紹10Base-T（802.3i，1990）以及100Base-T和1000Base-T（1GBASE-T或1 GigE）以太網標準，它們是當前辦公網絡中最常見的標準。我們將發現如何使用100BaseT規劃基本的網絡連接。最後，我們將介紹以太網和TCP / IP之間的差異。 \n PCH 12 /以太網技術 \n 在以太網成為主導技術之前，存在多種類型的網絡技術爭奪市場份額。一方面，以太網只是眾多競爭標準之一，包括令牌環，光纖分佈式數據接口（FDDI）等。到1990年代後期，單一標準顯然已成為辦公和住宅網絡中的主要選擇：IEEE 802.3以太網。以太網使用各種介質類型，從同軸電纜到雙絞銅線和光纖電纜（在較早的模塊中討論）。802.3以太網標準和使用幀在包括無線802.11在內的各種媒體上進行通信的概念如今非常盛行，了解以太網的基本知識（包括每個標準對我們網絡的各種速度和距離限制）至關重要。 \n 最初的802.3以太網標準以半雙工傳輸速率通過同軸電纜發送數據，這意味著設備只能以單獨的間隔交替發送（TX）或接收（RX），因為這兩個數據使用相同的路徑。這類似於使用對講機而不是電話進行通信。 \n 由於電纜的尺寸，這種同軸電纜設計被稱為Thinnet，後來又稱為Thinnet，並且主要用於總線和環形網絡拓撲中。 \n 最初被指定為10Base5的IEEE 802.3標準Thicknet提供的最大帶寬為10Mbps，並且距離限制為500米。Thinnet或IEEE 10Base2使用較小類型的同軸電纜，並且提供的最大帶寬為10 Mbps，但限制為185米。最終，該行業從同軸電纜過渡到非屏蔽雙絞線電纜。 \n 雙絞線電纜（稱為10BaseT）與3類電纜提供了相同的10 Mbps半雙工最大帶寬，但由於缺少同軸電纜提供的額外屏蔽，因此距離限制為100米。儘管衰減增加（信號強度隨著距離的增加而損失），但由於易於安裝且總體成本較低，網絡設計人員仍選擇雙絞線佈線。同軸電纜不受歡迎，並且802.3以太網標準繼續發展，雙絞線電纜類別的數據速率更快。 \n 以太網必須回答的設計問題是設備應如何訪問網絡。通過單線對進行半雙工傳輸（TX或RX）的性質意味著衝突迫在眉睫。訪問應該是確定性和有序的，還是基於競爭的且混亂的？較早的基於環的網絡（例如令牌環）是在必須有順序的前提下開發的：每台機器都將等待其輪流發送其數據，直到接收到圍繞環傳遞的電子令牌為止。這類似於美洲原住民和其他原住民部落使用的“說話棒”或“發言人的工作人員”，其中工作人員（令牌）使人員可以發言，其餘的小組成員則可以收聽。另一方面，以太網以基於競爭的模型為前提。這更加混亂，並且允許網絡上的任何設備在其希望的任何時間進行傳輸。這種類型的原理存在的問題是，要弄清楚如何防止兩個設備同時傳輸並導致數據衝突。對於以太網，答案是以一種稱為載波偵聽多路訪問/衝突檢測（CSMA / CD）的媒體訪問控制方法的形式出現的。 \n PCH 12 /載波偵聽多路訪問/衝突檢測 \n 半雙工傳輸的性質帶來了對CSMA / CD的需求，它允許所有設備在需要時傳輸數據。運營商感知部分意味著設備首先“監聽”網絡以在會話中找到“中斷”。如果該設備聽不到其他設備的傳輸，則它將開始傳輸。多路訪問是指每台設備始終具有對網絡的平等訪問權限。這與令牌環網絡不同，在令牌環網絡中，每個設備都必須在發送之前等待信號（令牌）。最後，我們將碰撞檢測作為CSMA / CD控制方法的一部分。如果碰巧有兩個設備都準備好進行傳輸，則它們會在通話中“偵聽”網絡中的“失敗”，並且都同時開始傳輸， \n 下圖描述了CSMA / CD和CSMA / CA簡化算法。左分支是半雙工以太網使用的CSMA / CD，右分支是802.11無線LAN（也是半雙工）使用的CSMA / CA。 \n 四個設備以物理總線拓撲連接。 每個設備對網絡都有平等的訪問權限。 在這裡，所有設備都在監聽，試圖確定是否有其他設備在開始傳輸之前進行通信。 \n 這種同時傳輸導致數據衝突，導致傳輸中斷。 \n 當檢測到衝突時，兩個設備都會隨機選擇一個退避時間，然後嘗試重新傳輸。 計算機分別選擇等待200毫秒和300毫秒。 時間到時，他們將嘗試檢測另一台機器是否已經在傳輸。 如果未檢測到任何內容，則第一台機器將發送其消息。 一旦完成，第二台機器將在其300毫秒的等待時間之後發送其消息。 \n \n', 'tags': '', 'url': '中文(從P77開始).html'}, {'title': 'homework2', 'text': '', 'tags': '', 'url': 'homework2.html'}, {'title': 'homework3', 'text': 'range:21.~24. \n', 'tags': '', 'url': 'homework3.html'}, {'title': '21(EN&CH)', 'text': 'EN(EX) \n Write To A File  Exercise 21 (and Solution) Take the code from the How To Decode A Website exercise (if you didn’t do it or just want to play with some different code, use the code from the solution), and instead of printing the results to a screen, write the results to a txt file. In your code, just make up a name for the file you are saving to. \n Extras: \n Ask the user to specify the name of the output file that will be saved. Discussion Topics: \n Writing to a file 1.Gotchas and warnings 2.Saving to a file 3.Python makes it very easy to write to a file. Depending on what kind of file you want to write to and what kind of data you are writing, your options are plenty. I will show you the simplest form of writing to a file - writing plain text to a plain old text file. In other words, writing a string to a .txt file. \n The code looks like this: \n with open(\'file_to_save.txt\', \'w\') as open_file:\n    open_file.write(\'A string to write\') \n An alternate way of writing the same code is like so: \n \n  open_file = open(\'file_to_save.txt\', \'w\')\n  open_file.write(\'A string to write\')\n  open_file.close() \n The first is considered better programming practice, but the second might explain a little bit better what is going on in the first code sample. \n Let’s go through line by line. \n The with open(\'file_to_save.txt\', \'w\') as open_file syntax is new for us - all it means is that inside the code block indented underneath, there will be a variable called open_file that will represent the file object. You can pick any name for this file - it is just a variable name. The open() function takes two arguments - the first is the name of a file as a string (if the file does not exist, Python will create it), and a second argument that represents how the file should be opened. There are a few ways you can open files (read all about it at the official Python documentation), but in short, there are two most common ones: \'r\' and \'w\'. \'r\' stands for “read only” and \'w\' stands for “write only” (you can open for both read and write using \'r+\'). You should tell Python which way you want to open the file - you don’t want to modify a file you are only looking at, and opening a file with \'w\' when you want to only read it will overwrite the old file. \n When you open a file, it will look for it in the same directory as the Python program. If there is no file with that name, Python will create a file in that directory with the given name. To look for files in other directories, use the ../ notation to move up and down directories as necessary. \n As soon as the program exists the with code block for any reason, it will close the file. In the second code example case, I created the file object by opening the file and saving the object to my variable open_file. I then had to remember to close the file manually at the end of my program. This is considered worse programming practice, because in case there is an error in the program and it terminates before hitting the .close() statement, there will be a floating open file object somewhere in memory. You do this enough times and it becomes a problem, especially for production environments. For playing around with Python, this is not usually a problem, but why not learn how to program correctly the first time? \n The write() portion is simple - call .write() with a string (if something is not a string, turn it into a string first), and it will write to the end of the file. \n When the program exists the with statement, the file will automatically be saved. In fact, every time after a .write() statement, the file will be automatically saved. \n \n Gotchas and Warnings This all seems simple enough, but there are a few caveats to the file-writing endeavor. \n 1.You always want to make sure you close a file. The easiest strategy for this is explained above - use the with statement rather than trying to manually remember to .close() the file. 2.Opening a file for writing with \'w\' will overwrite any file that currently exists with that name. If you have previously written data to that file, it is now gone as soon as Python opens it. 3.You can write any kind of object to any kind of file in Python, as long as you specify the correct format. The simplest thing to do is to write strings to a .txt file. But remember - you have to convert numbers or objects into strings before you write them to a file. In a later exercise, we’ll talk about writing to other formats. The best way to remember the caveats is to explore them yourself, so have at it! \n CH(EX) \n ----------------------------------------------------------------------------------------------------------- \n EN(AN) \n Write To A File Solutions Exercise 21 Take the code from the How To Decode A Website exercise (if you didn’t do it or just want to play with some different code, use the code from the solution), and instead of printing the results to a screen, write the results to a txt file. In your code, just make up a name for the file you are saving to. \n Sample solution \n Extras: \n 1.Ask the user to specify the name of the output file that will be saved. 2.Sample solution The sample solution takes the out-of-the-box solution for Exercise 17 and adds two components: \n Asking the user for the name of a file Substitutes every print statement with a statement writing to a file Here is the full solution: \n import requests\nfrom bs4 import BeautifulSoup\n \nbase_url = \'http://www.nytimes.com\'\nr = requests.get(base_url)\nsoup = BeautifulSoup(r.text)\n\nfilename = input("File to save to: ")\n\nwith open(filename, \'w\') as f:\n  for story_heading in soup.find_all(class_="story-heading"): \n      if story_heading.a: \n          f.write(story_heading.a.text.replace("\\n", " ").strip())\n      else: \n          f.write(story_heading.contents[0].strip()) \n CH(AN)', 'tags': '', 'url': '21(EN&CH).html'}, {'title': '22(EN&CH)', 'text': "EN(EX) \n Read From File  Exercise 22 (and Solution) Given a .txt file that has a list of a bunch of names, count how many of each name there are in the file, and print out the results to the screen. I have a .txt file for you, if you want to use it! \n Extra: \n Instead of using the .txt file from above (or instead of, if you want the challenge), take this .txt file, and count how many of each “category” of each image there are. This text file is actually a list of files corresponding to the SUN database scene recognition database, and lists the file directory hierarchy for the images. Once you take a look at the first line or two of the file, it will be clear which part represents the scene category. To do this, you’re going to have to remember a bit about string parsing in Python 3. I talked a little bit about it in this post. Discussion \n Topics: 1.Reading a file 2.Dictionaries \n Reading a File Reading a file is very analogous to writing a file, as I discussed before in Exercise 21. But, the best source is always the official Python 3.3 documentation. \n Simply, reading to a file takes two steps: 1.Opening the file for reading 2.Read! \n Opening a file for reading is the same as opening for writing, just using a different flag: \n with open('file_to_read.txt', 'r') as open_file:\n    all_text = open_file.read() \n Note how the 'r' flag stands for “read”. The code sample from above reads the entire open_file all at once into the all_text variable. But, this means that we now have a long string in all_text that can then be manipulated in Python using any string methods you want. \n Another way of reading data from the file is line by line: \n  with open('file_to_read.txt', 'r') as open_file:\n  \tline = open_file.readline()\n  \twhile line:\n    \tprint(line)\n    \tline = open_file.readline() \n Instead of print(line), you can imagine doing anything you want to the line of text… If you save it to a variable, you have a string that you can then use something like .strip() or .split() with. \n Dictionaries Dictionaries are Python’s way of associating two pieces of data together. The official documentation says it all. \n   student_scores = {'Adama': 100, 'Starbuck': 75, 'Apollo': 80, 'Athena': 85, 'Agathon': 90} \n The strings (or whatever happens to the left of the\xa0 : \xa0 sign), are called \xa0 keys . When I want to access the \xa0 values \xa0 (the things to the right of the \xa0 : \xa0 sign), I need to ask the dictionary for the value associated with the key: \n   adama_score = student_scores['Adama'] \n You can then modify the score and save it back to the dictionary: \n  adama_score = student_scores['Adama']\n  adama_score += 100\t% adama_score is now 200. This doesn't change the dictionary value\n  student_scores['Adama'] = adama_score\t\t% the score in the dictionary is now updated \n I can’t ask the dictionary for the key associated with a value, but I can get a list of all the keys, and the same for all the values: \n   all_scores = student_scores.keys()\n  all_names = student_scores.values() \n I can use the in keyword (just like in lists), do dictionary comprehensions like list comprehensions (these are cool, take a look at the official bit about these), and iterate over the elements in the dictionary (the syntax is just a little bit different). \n   for pair in student_scores.items():\n  \tprint(pair) \n And this prints out pairs of keys and values that look like: \xa0 (Adama, 100) , etc. \n Because dictionaries are not ordered, looping through them does not guarantee the key / value pairs coming out in a particular order. So be careful. \n CH(EX) \n ----------------------------------------------------------------------------------------------------------- \n EN(AN) \n Read From File Solutions Exercise 22 Given a .txt file that has a list of a bunch of names, count how many of each name there are in the file, and print out the results to the screen. I have a .txt file for you, if you want to use it! \n Extra:Instead of using the .txt file from above (or instead of, if you want the challenge), take this .txt file, and count how many of each “category” of each image there are. This text file is actually a list of files corresponding to the SUN database scene recognition database, and lists the file directory hierarchy for the images. Once you take a look at the first line or two of the file, it will be clear which part represents the scene category. To do this, you’re going to have to remember a bit about string parsing in Python 3. I talked a little bit about it in this post. \n Sample solution The basics of reading any file is that you need to read each line one by one, only reading the next line if the next line exists. The skeleton code for this operation is shown here: \n  with open('filename.txt') as f:\n  \tline = f.readline()\n  \twhile line:\n  \t\tprint(line)\n  \t\tline = f.readline() \n Basically, after you open the file, read one line at a time. Then, check if the line exists using the statement \xa0 while line , and if it does, get the next line. What happens when the next time \xa0 line = f.readline() \xa0 is called and there is no next line? \xa0 while line \xa0 the next time around in the loop will return \xa0 False \xa0 and the code stops. \n Given this skeleton, the first solution counts the different names in the \xa0 nameslist.txt \xa0 file. \n counter_dict = {}\nwith open('nameslist.txt') as f:\n\tline = f.readline()\n\twhile line:\n\t\tline = line.strip()\n\t\tif line in counter_dict:\n\t\t\tcounter_dict[line] += 1\n\t\telse:\n\t\t\tcounter_dict[line] = 1\n\t\tline = f.readline()\n\nprint(counter_dict) \n The line line = line.strip() takes the string read in from the line and gets rid of all whitespaces (including the \\n character). And the basic construction and update of the dictionary is very common in many applications. \n The second counts how many of each category of image there are in the Training_01.txt file from the SUN image database. \n counter_dict = {}\nwith open('Training_01.txt') as f:\n\tline = f.readline()\n\twhile line:\n\t\tline = line[3:-26]\n\t\tif line in counter_dict:\n\t\t\tcounter_dict[line] += 1\n\t\telse:\n\t\t\tcounter_dict[line] = 1\n\t\tline = f.readline()\n\nprint(counter_dict) \n CN(AN) \n", 'tags': '', 'url': '22(EN&CH).html'}, {'title': '23(EN&CH)', 'text': "EN(EX) \n File Overlap  Exercise 23 (and Solution) Given two .txt files that have lists of numbers in them, find the numbers that are overlapping. One .txt file has a list of all prime numbers under 1000, and the other .txt file has a list of happy numbers up to 1000. \n (If you forgot, prime numbers are numbers that can’t be divided by any other number. And yes, happy numbers are a real thing in mathematics - you can look it up on Wikipedia. The explanation is easier with an example, which I will describe below.) \n Discussion You’ll need to stitch together a few ideas of things I’ve previously talked about on this blog, so if you need a refresher in any of these topics, now is your chance! Of course, there are any number of ways to do this exercise, so these are only suggestions. \n Topics: \n 1.Reading a file, in Exercise 21 2.Number types and converting to integers from strings, in Exercise 1 3.Lists, in Exercise 3 and Exercise 5 \n CH(EX) \n ----------------------------------------------------------------------------------------------------------- \n EN(AN) \n File Overlap Solutions Exercise 23 Given two .txt files that have lists of numbers in them, find the numbers that are overlapping. One .txt file has a list of all prime numbers under 1000, and the other .txt file has a list of happy numbers up to 1000. \n (If you forgot, prime numbers are numbers that can’t be divided by any other number. And yes, happy numbers are a real thing in mathematics - you can look it up on Wikipedia. The explanation is easier with an example, which I will describe below.) \n Sample solution For a simple look at the solution (without using functions and using a for loop), look no further. Read on for a solution using functions and list comprehensions, along with a detailed explanation in Python 3. \n The solution without functions using a for loop (read on for the one with functions and the explanation) \n primeslist = []\nwith open('primenumbers.txt') as primesfile:\n\tline = primesfile.readline()\n\twhile line:\n\t\tprimeslist.append(int(line))\n\t\tline = primesfile.readline()\n\nhappieslist = []\nwith open('happynumbers.txt') as happiesfile:\n\tline = happiesfile.readline()\n\twhile line:\n\t\thappieslist.append(int(line))\n\t\tline = happiesfile.readline()\n\noverlaplist = []\nfor elem in primeslist:\n\tif elem in happieslist:\n\t\toverlaplist.append(elem)\n\t\t\nprint(overlaplist) \n The solution with functions using list comprehensions (read on for the explanation) \n def filetolistofints(filename):\n\tlist_to_return = []\n\twith open(filename) as f:\n\t\tline = f.readline()\n\t\twhile line:\n\t\t\tlist_to_return.append(int(line))\n\t\t\tline = f.readline()\n\treturn list_to_return\n\nprimeslist = filetolistofints('primenumbers.txt')\nhappieslist = filetolistofints('happynumbers.txt')\n\noverlaplist = [elem for elem in primeslist if elem in happieslist]\nprint(overlaplist) \n The explanation The interesting thing about this problem is that it is an extension of a previous exercise asking to find the overlap of two lists. Instead of lists that are hard-coded into the file, the program will now read lists of information from files somewhere on the computer and perform the same overlap operation. \n The first thing to do is open the .txt files and save them somewhere on your computer (easiest is in the same folder as the Python file you are working in). You notice that when you look at the file, each line of the file is an integer. Next, in Python we want to open one of the files and save the contents (as integers) into a list. \n This code snippet, as taken from the Exercise 23 explanation about reading from files, will open the file and print out all the lines. \n  with open('primenumbers.txt') as f:\n  \tline = f.readline()\n  \twhile line:\n  \t\tprint(line)\n  \t\tline = f.readline() \n We now want to just save each line as a separate integer into the list. \n   primeslist = []\n  with open('primenumbers.txt') as f:\n  \tline = f.readline()\n  \twhile line:\n  \t\tprimeslist.append(int(line))\n  \t\tline = f.readline()\n \n All we did was change the print into an append to the list, and make an empty list at the beginning. Note that before I append the line to my list, I turn it into an int with the int() statement. \n Now we have a choice. We can either do this twice (copy and paste the exact same code), or write a function to do this for us whenever we want. \n Let’s make this into a function, for explanation’s sake. What we want to do here is make a function that I give the name of the file to, and it gives back to me a list of all the numbers in that file, assuming each line contains a separate integer. We need to add two lines to our code snippet from above, the function header and the return statement. The function header is just the name of the function with the list of variables to return, and the return statement is the line return list_of_ints at the end of the function. \n def filetolistofints(filename):\n\t  list_of_ints = []\n\t  with open(filename) as f:\n\t  \tline = f.readline()\n\t  \twhile line:\n\t  \t\tlist_of_ints.append(int(line))\n\t  \t\tline = f.readline()\n\t  return list_of_ints \n Now I can use this function to read both of my files in two simple lines: \n  primeslist = filetolistofints('primenumbers.txt')\n  happieslist = filetolistofints('happynumbers.txt') \n What I have now in my variables primeslist and happieslist are lists where each element was a number on a separate line in each of the files. \n My last step is to find the overlap between them. I can either use two for loops or a list comprehension. (If you need a refresher, Exercise 3 talks about for loops and Exercise 7 talks about list comprehensions.) \n As a list comprehension, you construct a new list that takes each element from primeslist and only adds it to our new list if it is inside happieslist. \n overlaplist = [elem for elem in primeslist if elem in happieslist] \n This can also be done with a for loop, as below: \n   overlaplist = []\n  for elem in primeslist:\n    if elem in happieslist:\n      overlaplist.append(elem) \n And when the loop is done, overlaplist will contain all the elements of the overlap. \n Now we can just print our result (using Python 3 syntax) and be done. \n print(overlaplist) \n For a full and concise solution once again, here it is: \n def filetolistofints(filename):\n\tlist_to_return = []\n\twith open(filename) as f:\n\t\tline = f.readline()\n\t\twhile line:\n\t\t\tlist_to_return.append(int(line))\n\t\t\tline = f.readline()\n\treturn list_to_return\n\nprimeslist = filetolistofints('primenumbers.txt')\nhappieslist = filetolistofints('happynumbers.txt')\n\noverlaplist = [elem for elem in primeslist if elem in happieslist]\nprint(overlaplist) \n CH(AN)", 'tags': '', 'url': '23(EN&CH).html'}, {'title': '24(EN&CH)', 'text': 'EN(EX) \n Exercise 24 (and Solution) This exercise is Part 1 of 4 of the Tic Tac Toe exercise series. The other exercises are: Part 2, Part 3, and Part 4. \n Time for some fake graphics! Let’s say we want to draw game boards that look like this: \n --- --- ---  | | | |   --- --- ---  | | | |   --- --- ---  | | | |   --- --- ---  This one is 3x3 (like in tic tac toe). Obviously, they come in many other sizes (8x8 for chess, 19x19 for Go, and many more). \n Ask the user what size game board they want to draw, and draw it for them to the screen using Python’s print statement. \n Remember that in Python 3, printing to the screen is accomplished by \n print("Thing to show on screen") Hint: this requires some use of functions, as were discussed previously on this blog and elsewhere on the Internet, like this TutorialsPoint link. \n Topics and links for more information The main topic of this exercise is functions. They are tricky, and deserve lots of practice and thought. Here are a few links in case you want some more reading. \n 1.Functions on TutorialsPoint 2.Hands-on Python, by Loyola University 3.Learn Python the Hard Way 4.ZetCode There are hundreds more out there - read and practice away! \n CH(EX)', 'tags': '', 'url': '24(EN&CH).html'}]};